$date
	Mon Dec 23 22:28:48 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 16 ! output_feature_map [15:0] $end
$var reg 1 " clk $end
$var reg 8 # input_feature_map_00 [7:0] $end
$var reg 8 $ input_feature_map_01 [7:0] $end
$var reg 8 % input_feature_map_02 [7:0] $end
$var reg 8 & input_feature_map_10 [7:0] $end
$var reg 8 ' input_feature_map_11 [7:0] $end
$var reg 8 ( input_feature_map_12 [7:0] $end
$var reg 8 ) input_feature_map_20 [7:0] $end
$var reg 8 * input_feature_map_21 [7:0] $end
$var reg 8 + input_feature_map_22 [7:0] $end
$var reg 8 , kernel_00 [7:0] $end
$var reg 8 - kernel_01 [7:0] $end
$var reg 8 . kernel_02 [7:0] $end
$var reg 8 / kernel_10 [7:0] $end
$var reg 8 0 kernel_11 [7:0] $end
$var reg 8 1 kernel_12 [7:0] $end
$var reg 8 2 kernel_20 [7:0] $end
$var reg 8 3 kernel_21 [7:0] $end
$var reg 8 4 kernel_22 [7:0] $end
$var reg 1 5 reset $end
$scope module uut $end
$var wire 1 " clk $end
$var wire 8 6 input_feature_map_00 [7:0] $end
$var wire 8 7 input_feature_map_01 [7:0] $end
$var wire 8 8 input_feature_map_02 [7:0] $end
$var wire 8 9 input_feature_map_10 [7:0] $end
$var wire 8 : input_feature_map_11 [7:0] $end
$var wire 8 ; input_feature_map_12 [7:0] $end
$var wire 8 < input_feature_map_20 [7:0] $end
$var wire 8 = input_feature_map_21 [7:0] $end
$var wire 8 > input_feature_map_22 [7:0] $end
$var wire 8 ? kernel_00 [7:0] $end
$var wire 8 @ kernel_01 [7:0] $end
$var wire 8 A kernel_02 [7:0] $end
$var wire 8 B kernel_10 [7:0] $end
$var wire 8 C kernel_11 [7:0] $end
$var wire 8 D kernel_12 [7:0] $end
$var wire 8 E kernel_20 [7:0] $end
$var wire 8 F kernel_21 [7:0] $end
$var wire 8 G kernel_22 [7:0] $end
$var wire 1 5 reset $end
$var reg 16 H conv_result [15:0] $end
$var reg 16 I output_feature_map [15:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
15
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
0"
b0 !
$end
#5
1"
#10
0"
b11111111 4
b11111111 G
b0 3
b0 F
b1 2
b1 E
b11111111 1
b11111111 D
b0 0
b0 C
b1 /
b1 B
b11111111 .
b11111111 A
b0 -
b0 @
b1 ,
b1 ?
b1001 +
b1001 >
b1000 *
b1000 =
b111 )
b111 <
b110 (
b110 ;
b101 '
b101 :
b100 &
b100 9
b11 %
b11 8
b10 $
b10 7
b1 #
b1 6
05
#15
b1111111111111010 H
1"
#20
0"
#25
1"
#30
